require_relative 'service'

module <%= toolkit_namespace %>::<%= module_name %>
  class Cli < Stackit::StackCli

    def initialize(*args)
      super(*args)
    end

    def self.initialize_cli
      Thor.desc "<%= stack_type %>", "Manages the <%= stack_type %> stack"
      Thor.subcommand "<%= stack_type %>", self
    end

    desc 'create-stack', 'Creates a new <%= stack_type %> cloudformation stack'
    method_option :template, aliases: '-t', desc: 'The cloudformation template'
    method_option :stack_name, aliases: '-n', desc: 'The stack name. Defaults to the camelized template file name'
    method_option :stack_policy, :aliases => '-p', :desc => 'A local file system or S3 (HTTPS) path to the stack policy'
    method_option :depends, :aliases => '-d', :type => :array, :default => [], :desc => 'Space delimited list of stack names to automatically map parameter values from'
    method_option :parameters, aliases: '-p', type: :hash, desc: 'Parameters supplied to the cloudformation template', default: {}
    method_option :parameters_file, desc: 'Parameters supplied to the cloudformation template'
    method_option :parameter_map, :aliases => '-pm', type: :hash, default: {}, desc: 'Parameter map used to direct dependent parameter values to stack template parameters'
    method_option :disable_rollback, :type => :boolean, :default => false, :desc => 'Disable cloudformation rollback when creation fails'
    method_option :wait, :aliases => '-w', type: :boolean, default: false, desc: 'Wait for the stack to enter STATUS_COMPLETE before returning or raise an exception if it times out'
    method_option :force, :desc => 'Force a stack update on unchanged templates'
    method_option :dry_run, :type => :boolean, :default => false, :desc => 'Run all code except AWS API calls'
    def create_stack
      Service.new(options).create!
    end

    desc 'update-stack', 'Updates the <%= stack_type %> cloudformation stack'
    method_option :template, aliases: '-t', desc: 'The cloudformation template'
    method_option :stack_name, aliases: '-n', desc: 'The stack name. Defaults to the camelized template file name'
    method_option :stack_policy, :aliases => '-p', :desc => 'A local file system or S3 (HTTPS) path to the stack policy'
    method_option :stack_policy_during_update, :aliases => '-pu', :desc => 'A local file system or S3 (HTTPS) path to the stack policy to use during update'
    method_option :depends, :aliases => '-d', :type => :array, :default => [], :desc => 'Space delimited list of stack names to automatically map parameter values from'
    method_option :parameters, aliases: '-p', type: :hash, desc: 'Parameters supplied to the cloudformation template', default: {}
    method_option :parameters_file, desc: 'Parameters supplied to the cloudformation template'
    method_option :parameter_map, :aliases => '-pm', type: :hash, default: {}, desc: 'Parameter map used to direct dependent parameter values to stack template parameters'
    method_option :disable_rollback, :type => :boolean, :default => false, :desc => 'Disable cloudformation rollback when creation fails'
    method_option :wait, :aliases => '-w', type: :boolean, default: false, desc: 'Wait for the stack to enter STATUS_COMPLETE before returning or raise an exception if it times out'
    method_option :force, :desc => 'Force a stack update on unchanged templates'
    method_option :dry_run, :type => :boolean, :default => false, :desc => 'Run all code except AWS API calls'
    def update_stack
      Service.new(options).update!
    end

    desc 'delete-stack', 'Deletes a <%= stack_type %> cloudformation stack'
    method_option :stack_name, aliases: '-n', desc: 'The stack name. Defaults to the camelized template file name'
    method_option :wait, :aliases => '-w', type: :boolean, default: false, desc: 'Wait for the stack to enter STATUS_COMPLETE before returning or raise an exception if it times out'
    method_option :dry_run, :type => :boolean, :default => false, :desc => 'Run all code except AWS API calls'
    def delete_stack
      Service.new(options).delete!
    end

    desc 'deploy', 'Creates a new VPC and deploys all stacks'
    method_option :template, aliases: '-t', desc: 'The cloudformation template'
    method_option :stack_name, aliases: '-n', desc: 'The stack name. Defaults to the camelized template file name'
    method_option :stack_policy, :aliases => '-p', :desc => 'A local file system or S3 (HTTPS) path to the stack policy'
    method_option :depends, :aliases => '-d', :type => :array, :default => [], :desc => 'Space delimited list of stack names to automatically map parameter values from'
    method_option :parameters, aliases: '-p', type: :hash, desc: 'Parameters supplied to the cloudformation template', default: {}
    method_option :parameters_file, desc: 'Parameters supplied to the cloudformation template'
    method_option :parameter_map, :aliases => '-pm', type: :hash, default: {}, desc: 'Parameter map used to direct dependent parameter values to stack template parameters'
    method_option :disable_rollback, :type => :boolean, :default => false, :desc => 'Disable cloudformation rollback when creation fails'
    method_option :dry_run, :type => :boolean, :default => false, :desc => 'Run all code except AWS API calls'
    method_option :cookbooks, aliases: '-c', desc: 'Path to cookbooks'
    def deploy
      Service.new(options).deploy!
    end

  end
end
